<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PurchMan</title>
  
  <subtitle>汲取思想，加以思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-23T08:01:46.003Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>PurchMan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>“编译优化”</title>
    <link href="http://yoursite.com/2020/04/23/%E2%80%9C%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E2%80%9D/"/>
    <id>http://yoursite.com/2020/04/23/“编译优化”/</id>
    <published>2020-04-23T07:59:48.000Z</published>
    <updated>2020-04-23T08:01:46.003Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要是针对千千工程编译时间的研究。分为两个方面，一方面是不考虑混淆代</p><p>码，只是单纯的打个debug包；另一方面是考虑混淆的情况，例如prelease、release包等</p><h3 id="开发中编译，不进行混淆"><a href="#开发中编译，不进行混淆" class="headerlink" title="开发中编译，不进行混淆"></a>开发中编译，不进行混淆</h3><p>随着Android Stduio版本的迭代，增量编译的速度已经很快了。在不采用第三方增量编译方法的前提下，只能是通过配置一些gradle的参数去改善。其实像许多盛极一时的编译工具：阿里的freeline、开源项目fastdex、收费工具JRebel for Android等都是两三年前的框架，现在都停止维护了。所以也就不考虑引入第三方增量编译工具测试了。</p><h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h4><ul><li>gradle版本为4.10.1，gradle plugin版本为3.2.1</li><li>编译命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew --profile --recompile-scripts --offline --rerun-tasks assembleA001Debug</span><br></pre></td></tr></table></figure><h4 id="优化点"><a href="#优化点" class="headerlink" title="优化点"></a>优化点</h4><p>1.<strong>将minSdkVersion修改为动态配置，本地Debug修改成21，打包时用19.</strong></p><p> minSdkVersion 19<br><img src="https://s1.ax1x.com/2020/04/22/JtxwLR.png" alt="image"></p><p> minSdkVersion 21<br> <img src="https://s1.ax1x.com/2020/04/22/JNp6YV.png" alt="image"></p><p>前后对比会发现，当minSdkVersion修改为21的时候，不会去执行transformClassesWithMultidexlistForA001Debug命令</p><p>2.<strong>本地开发，在不需要合并头部参数数据时，headshot开关置成false</strong></p><p>headshot是合并头部的工具，具体配置是在app目录下的build.gradle<br><img src="https://s1.ax1x.com/2020/04/23/JaN4Yj.png" alt="image"></p><p><strong>全量编译</strong></p><ul><li>打开headshot，headshot enable 置成true<br><img src="https://s1.ax1x.com/2020/04/22/JNPx0J.png" alt="image"></li></ul><ul><li><p>关闭headshot，heahshot enable 置成false<br><img src="https://s1.ax1x.com/2020/04/22/JNFNrD.png" alt="image"></p><p><strong>增量编译，主工程增加一行代码，编译命令为./gradlew –profile –offline assembleA001Debug</strong></p></li><li><p>打开headshot，headshot enable 置成true（这里是我的电脑废掉了，突然很慢，结论是尽管增量编译，headshot还是会进行，所以比较耗时）<br><img src="https://s1.ax1x.com/2020/04/22/JNVBm8.png" alt="image"></p></li></ul><ul><li>关闭headshot，heahshot enable 置成false<br><img src="https://s1.ax1x.com/2020/04/22/JNkdyT.png" alt="image"></li></ul><p>以上对比，得出结论：如果不需要合并头部参数，建议把headshot关掉吧。不过千万不要提交到正式版本上。</p><ol start="3"><li><strong>以下都是一些常规配置了，具体参数对应什么意思，大家可以参考这些文章<a href="https://developer.android.com/studio/build/optimize-your-build" target="_blank" rel="noopener">优化构建速度</a>，<a href="https://droidyue.com/blog/2017/04/16/speedup-gradle-building/" target="_blank" rel="noopener">技术小黑屋</a>、<a href="https://www.cnblogs.com/steffen/p/9865905.html" target="_blank" rel="noopener">AndroidStudio提高编译速度的建议</a>。我感觉这些在我电脑上测试效果不大，大家自行测试</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.jvmargs&#x3D;-Xmx5120m -XX:MaxPermSize&#x3D;2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding&#x3D;UTF-8</span><br><span class="line">org.gradle.daemon&#x3D;true</span><br><span class="line">org.gradle.parallel&#x3D;true</span><br><span class="line">org.gradle.caching &#x3D; true</span><br><span class="line">org.gradle.configureondemand&#x3D;true</span><br><span class="line"># kotlin需要，本地没有kotlin代码，有的话可以试试</span><br><span class="line">kapt.incremental.apt&#x3D;true</span><br></pre></td></tr></table></figure><h3 id="混淆代码优化"><a href="#混淆代码优化" class="headerlink" title="混淆代码优化"></a>混淆代码优化</h3><p>混淆代码测试，我就直接拿jenkins上跑的数据来进行比较</p><h4 id="测试环境-1"><a href="#测试环境-1" class="headerlink" title="测试环境"></a>测试环境</h4><ul><li>gradle版本为5.4.1，gradle plugin版本为3.5.0</li><li>编译命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew --no-daemon clean -Dorg.gradle.jvmargs&#x3D;-Xmx5120m assembleA001PrereleaseChannels -PchannelList&#x3D;A001</span><br></pre></td></tr></table></figure></li></ul><h4 id="优化点-1"><a href="#优化点-1" class="headerlink" title="优化点"></a>优化点</h4><ol><li><strong>升级gradle到5.x（尝试过升级到6.x，编译时遇到了错误，折腾了好久，终于放弃了。其实6.x刚出来没多久，还是先用5.x稳定点）。最后用了gradle版本为5.4.1，gradle plugin版本为3.5.0。升级到这个版本的好处就是可以采用R8编译器了.详细介绍请看<a href="https://developer.android.com/studio/build/shrink-code?hl=zh-cn" target="_blank" rel="noopener">缩减、混淆处理和优化您的应用</a>、<a href="https://blog.csdn.net/Mr_dsw/article/details/90141647" target="_blank" rel="noopener">Android D8 编译器 和 R8 工具</a></strong></li></ol><ul><li>采用 ProGuard 来混淆代码</li></ul><p><img src="https://s1.ax1x.com/2020/04/22/JNMUUK.png" alt="image"></p><ul><li>采用R8来混淆代码</li></ul><p><img src="https://s1.ax1x.com/2020/04/22/JNQZxH.png" alt="image"><br><img src="https://s1.ax1x.com/2020/04/22/JNQ8JS.png" alt="image"></p><p>得出结论，采用R8混淆可以缩短一分钟多</p><p><strong>踩坑</strong></p><ul><li>混淆文件中ignorewarning 需要改成  -ignorewarnings，不改编译不过<br><img src="https://s1.ax1x.com/2020/04/23/JaUjDf.png" alt="image"><br><img src="https://s1.ax1x.com/2020/04/23/Jaazsx.png" alt="image"></li><li>混淆规则里不能用extend代替implements，R8编译时会给出警告，还是可以编译的<br><img src="https://s1.ax1x.com/2020/04/23/JaamaF.png" alt="image"><br><img src="https://s1.ax1x.com/2020/04/22/JNlSfS.png" alt="image"></li></ul><p><strong>优化点2</strong></p><p>抽取主工程的module打成aar。千千的工程除了app外有9个module，仔细观察了下，原先的构想应该是想说单独的module可以打成单独的apk测试，不过实际现在没有用到。所以符合打成aar的条件。开发时依赖project，打包时依赖aar。</p><p>最终依赖如图，base module不能直接依赖，编译时候会报错，找了许久没找到原因，先这样吧。<br><img src="https://s1.ax1x.com/2020/04/22/JN108U.png" alt="image"></p><p><img src="https://s1.ax1x.com/2020/04/22/JN8fje.png" alt="image"></p><p>减少了10s左右，大家可以自行抉择是否需要这样处理。</p><p>附上命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew :base:clean :base:assembleRelease &amp;&amp; .&#x2F;gradlew :base:publish -Pcomponent&#x3D;base</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew :downloadmanager:clean :downloadmanager:assembleRelease &amp;&amp; .&#x2F;gradlew :downloadmanager:publish -Pcomponent&#x3D;downloadmanager</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew :listen:clean :listen:assembleRelease &amp;&amp; .&#x2F;gradlew :listen:publish -Pcomponent&#x3D;listen</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew :mine:clean :mine:assembleRelease &amp;&amp; .&#x2F;gradlew :mine:publish -Pcomponent&#x3D;mine</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew :recommend:clean :recommend:assembleRelease &amp;&amp; .&#x2F;gradlew :recommend:publish -Pcomponent&#x3D;recommend</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew :setting:clean :setting:assembleRelease &amp;&amp; .&#x2F;gradlew :setting:publish -Pcomponent&#x3D;setting</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew :videobase:clean :videobase:assembleRelease &amp;&amp; .&#x2F;gradlew :videobase:publish -Pcomponent&#x3D;videobase</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew :videoplay:clean :videoplay:assembleRelease &amp;&amp; .&#x2F;gradlew :videoplay:publish -Pcomponent&#x3D;videoplay</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;gradlew :videorecord:clean :videorecord:assembleRelease &amp;&amp; .&#x2F;gradlew :videorecord:publish -Pcomponent&#x3D;videorecord</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文主要是针对千千工程编译时间的研究。分为两个方面，一方面是不考虑混淆代&lt;/p&gt;
&lt;p&gt;码，只是单纯的打
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/04/22/hello-world/"/>
    <id>http://yoursite.com/2020/04/22/hello-world/</id>
    <published>2020-04-22T12:24:10.484Z</published>
    <updated>2020-04-22T12:24:10.484Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
